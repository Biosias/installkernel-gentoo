#!/usr/bin/env bash

# this file is installed by sys-kernel/installkernel-gentoo

ver=${1}
img=${2}
basedir=$(dirname "${img}")

# familiar helpers, we intentionally don't use Gentoo functions.sh
die() {
	echo -e " ${NOCOLOR-\e[1;31m*\e[0m }${*}" >&2
	exit 1
}

einfo() {
	echo -e " ${NOCOLOR-\e[1;32m*\e[0m }${*}" >&2
}

ewarn() {
	echo -e " ${NOCOLOR-\e[1;33m*\e[0m }${*}" >&2
}

find_config_file() {
	file=${1}
	if [[ -f "/etc/kernel/${file}" ]]; then
		echo "/etc/kernel/${file}"
	elif [[ -f "/usr/lib/kernel/${file}" ]]; then
		echo "/usr/lib/kernel/${file}"
	fi
}

main() {
	# re-define for subst to work
	[[ -n ${NOCOLOR+yes} ]] && NOCOLOR=

	# do nothing if somehow ukify is not installed
	if [[ -x /usr/lib/systemd/ukify ]]; then
		ukify=/usr/lib/systemd/ukify
	elif [[ -x /lib/systemd/ukify ]]; then
		ukify=/lib/systemd/ukify
	else
		ewarn "ukify is not installed" && exit 0
	fi

	[[ ${EUID} -eq 0 ]] || die "Please run this script as root"

	ukify_gen_args=(
		build
		--linux="${img}"
		--uname="${ver}"
		--output="${basedir}/uki.efi"
	)

	initrd="${basedir}/initrd"
	[[ -f ${initrd} ]] && ukify_gen_args+=(--initrd="${initrd}")

	# Use the same files as installkernel-systemd's 60-ukify.install
	cmdline=$(find_config_file cmdline)
	[[ "${cmdline}" ]] && ukify_gen_args+=(--cmdline=@"${cmdline}")

	ukiconf=$(find_config_file uki.conf)
	[[ "${ukiconf}" ]] && ukify_gen_args+=(--config="${ukiconf}")

	devicetree_config=$(find_config_file devicetree)
	if [[ "${devicetree_config}" ]]; then
		devicetree_path=$(cat "${devicetree_config}")
		if [[ -f "/usr/lib/firmware/${ver}/device-tree/${devicetree_path}" ]]; then
			ukify_gen_args+=(--devicetree="/usr/lib/firmware/${ver}/device-tree/${devicetree_path}")
		elif [[ -f "/usr/lib/linux-image-${ver}/${devicetree_path}" ]]; then
			ukify_gen_args+=(--devicetree="/usr/lib/linux-image-${ver}/${devicetree_path}")
		elif [[ -f "/usr/lib/modules/${ver}/dtb/${devicetree_path}" ]]; then
			ukify_gen_args+=(--devicetree="/usr/lib/modules/${ver}/dtb/${devicetree_path}")
		fi
	fi

	if [[ ${SECUREBOOT_SIGN_KEY} == pkcs11:* ]]; then
		ukify_gen_args+=(
			--secureboot-private-key="${SECUREBOOT_SIGN_KEY}"
			--signtool=sbsign
			--signing-engine=pkcs11
		)
	elif [[ -r ${SECUREBOOT_SIGN_KEY} ]]; then
		ukify_gen_args+=(
			--secureboot-private-key="${SECUREBOOT_SIGN_KEY}"
		)
	fi

	if [[ -r ${SECUREBOOT_SIGN_CERT} ]]; then
		ukify_gen_args+=(
			--secureboot-certificate="${SECUREBOOT_SIGN_CERT}"
		)
	fi

	einfo "Calling ukify with arguments: ${ukify_gen_args[*]}"
	${ukify} "${ukify_gen_args[@]}" || die "Failed to generate UKI"
}

main
